// tslint:disable
/**
 * Commerce API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.002
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AggregateField
 */
export interface AggregateField {
    /**
     * 
     * @type {string}
     * @memberof AggregateField
     */
    aggregateName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AggregateField
     */
    name?: string | null;
}
/**
 * 
 * @export
 * @interface AggregateResponse
 */
export interface AggregateResponse {
    /**
     * 
     * @type {string}
     * @memberof AggregateResponse
     */
    aggregateName?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AggregateResponse
     */
    otherDocCount?: number;
    /**
     * 
     * @type {number}
     * @memberof AggregateResponse
     */
    errorUpperBound?: number;
    /**
     * 
     * @type {Array<AggregateResponseBucket>}
     * @memberof AggregateResponse
     */
    buckets?: Array<AggregateResponseBucket> | null;
    /**
     * 
     * @type {Attribute}
     * @memberof AggregateResponse
     */
    attribute?: Attribute;
}
/**
 * 
 * @export
 * @interface AggregateResponseBucket
 */
export interface AggregateResponseBucket {
    /**
     * 
     * @type {number}
     * @memberof AggregateResponseBucket
     */
    key?: number;
    /**
     * 
     * @type {number}
     * @memberof AggregateResponseBucket
     */
    count?: number;
    /**
     * 
     * @type {string}
     * @memberof AggregateResponseBucket
     */
    filterKey?: string | null;
}
/**
 * 
 * @export
 * @interface Attribute
 */
export interface Attribute {
    /**
     * 
     * @type {Array<string>}
     * @memberof Attribute
     */
    productType?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof Attribute
     */
    id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Attribute
     */
    code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Attribute
     */
    label?: string | null;
    /**
     * 
     * @type {AttributeType}
     * @memberof Attribute
     */
    type?: AttributeType;
    /**
     * 
     * @type {Array<AttributeOption>}
     * @memberof Attribute
     */
    options?: Array<AttributeOption> | null;
}
/**
 * 
 * @export
 * @interface AttributeOption
 */
export interface AttributeOption {
    /**
     * 
     * @type {string}
     * @memberof AttributeOption
     */
    label?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AttributeOption
     */
    value?: number;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum AttributeType {
    NUMBER_0 = 0,
    NUMBER_1 = 1,
    NUMBER_2 = 2,
    NUMBER_3 = 3,
    NUMBER_4 = 4
}

/**
 * 
 * @export
 * @interface CartItem
 */
export interface CartItem {
    [key: string]: object | any;

    /**
     * 
     * @type {string}
     * @memberof CartItem
     */
    status?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CartItem
     */
    trackTraceLogo?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CartItem
     */
    trackTraceStatus?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CartItem
     */
    trackTraceLink?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CartItem
     */
    itemId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CartItem
     */
    sku?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CartItem
     */
    quantity?: number;
    /**
     * 
     * @type {string}
     * @memberof CartItem
     */
    name?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CartItem
     */
    price?: number;
    /**
     * 
     * @type {number}
     * @memberof CartItem
     */
    priceInclTax?: number;
    /**
     * 
     * @type {number}
     * @memberof CartItem
     */
    totalInclTax?: number;
    /**
     * 
     * @type {CartItemOptions}
     * @memberof CartItem
     */
    options?: CartItemOptions;
    /**
     * 
     * @type {string}
     * @memberof CartItem
     */
    image?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CartItem
     */
    specialPriceIncludingTax?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CartItem
     */
    specialPrice?: number | null;
    /**
     * 
     * @type {Array<ProductProperty>}
     * @memberof CartItem
     */
    properties?: Array<ProductProperty> | null;
    /**
     * 
     * @type {string}
     * @memberof CartItem
     */
    urlPath?: string | null;
}
/**
 * 
 * @export
 * @interface CartItemCustomOptions
 */
export interface CartItemCustomOptions {
    /**
     * 
     * @type {string}
     * @memberof CartItemCustomOptions
     */
    id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CartItemCustomOptions
     */
    label?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CartItemCustomOptions
     */
    value?: string | null;
}
/**
 * 
 * @export
 * @interface CartItemOptions
 */
export interface CartItemOptions {
    /**
     * 
     * @type {Array<CartItemOptionsConfigurable>}
     * @memberof CartItemOptions
     */
    configurableItemOptions?: Array<CartItemOptionsConfigurable> | null;
    /**
     * 
     * @type {Array<CartItemCustomOptions>}
     * @memberof CartItemOptions
     */
    customOptions?: Array<CartItemCustomOptions> | null;
    /**
     * 
     * @type {string}
     * @memberof CartItemOptions
     */
    groupId?: string | null;
}
/**
 * 
 * @export
 * @interface CartItemOptionsConfigurable
 */
export interface CartItemOptionsConfigurable {
    /**
     * 
     * @type {string}
     * @memberof CartItemOptionsConfigurable
     */
    id?: string | null;
    /**
     * 
     * @type {object}
     * @memberof CartItemOptionsConfigurable
     */
    value?: object | null;
}
/**
 * 
 * @export
 * @interface CartPaymentMethod
 */
export interface CartPaymentMethod {
    /**
     * 
     * @type {string}
     * @memberof CartPaymentMethod
     */
    code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CartPaymentMethod
     */
    title?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CartPaymentMethod
     */
    hasSubMethods?: boolean;
}
/**
 * 
 * @export
 * @interface CartSegment
 */
export interface CartSegment {
    /**
     * 
     * @type {CartSegmentType}
     * @memberof CartSegment
     */
    type?: CartSegmentType;
    /**
     * 
     * @type {string}
     * @memberof CartSegment
     */
    text?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CartSegment
     */
    amount?: number;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum CartSegmentType {
    NUMBER_0 = 0,
    NUMBER_1 = 1,
    NUMBER_2 = 2,
    NUMBER_3 = 3,
    NUMBER_4 = 4
}

/**
 * 
 * @export
 * @interface CartShippingMethod
 */
export interface CartShippingMethod {
    /**
     * 
     * @type {string}
     * @memberof CartShippingMethod
     */
    code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CartShippingMethod
     */
    title?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CartShippingMethod
     */
    error?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CartShippingMethod
     */
    price?: number;
    /**
     * 
     * @type {number}
     * @memberof CartShippingMethod
     */
    priceInclTax?: number;
}
/**
 * 
 * @export
 * @interface CartTotal
 */
export interface CartTotal {
    [key: string]: object | any;

    /**
     * 
     * @type {number}
     * @memberof CartTotal
     */
    grandTotal?: number;
    /**
     * 
     * @type {number}
     * @memberof CartTotal
     */
    subTotal?: number;
    /**
     * 
     * @type {number}
     * @memberof CartTotal
     */
    discountAmount?: number;
    /**
     * 
     * @type {string}
     * @memberof CartTotal
     */
    currency?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CartTotal
     */
    totalQuantity?: number;
    /**
     * 
     * @type {number}
     * @memberof CartTotal
     */
    shippingIncludingTax?: number;
    /**
     * 
     * @type {number}
     * @memberof CartTotal
     */
    taxAmount?: number;
    /**
     * 
     * @type {Array<CartItem>}
     * @memberof CartTotal
     */
    items?: Array<CartItem> | null;
    /**
     * 
     * @type {Array<CartSegment>}
     * @memberof CartTotal
     */
    segments?: Array<CartSegment> | null;
    /**
     * 
     * @type {UserAddress}
     * @memberof CartTotal
     */
    shippingAddress?: UserAddress;
    /**
     * 
     * @type {UserAddress}
     * @memberof CartTotal
     */
    billingAddress?: UserAddress;
    /**
     * 
     * @type {string}
     * @memberof CartTotal
     */
    paymentMethodCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CartTotal
     */
    shippingMethodCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CartTotal
     */
    paymentStatus?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CartTotal
     */
    orderDate?: string;
    /**
     * 
     * @type {string}
     * @memberof CartTotal
     */
    status?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CartTotal
     */
    orderId?: string | null;
}
/**
 * 
 * @export
 * @interface Category
 */
export interface Category {
    [key: string]: object | any;

    /**
     * 
     * @type {string}
     * @memberof Category
     */
    id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    label?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    urlPath?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    slug?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    parentId?: string | null;
    /**
     * 
     * @type {Array<CategoryParent>}
     * @memberof Category
     */
    parents?: Array<CategoryParent> | null;
    /**
     * 
     * @type {boolean}
     * @memberof Category
     */
    isActive?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    level?: number;
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    sortOrder?: number;
    /**
     * 
     * @type {Array<Category>}
     * @memberof Category
     */
    children?: Array<Category> | null;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    updatedAt?: string;
}
/**
 * 
 * @export
 * @interface CategoryParent
 */
export interface CategoryParent {
    /**
     * 
     * @type {string}
     * @memberof CategoryParent
     */
    id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CategoryParent
     */
    label?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CategoryParent
     */
    slug?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CategoryParent
     */
    urlPath?: string | null;
}
/**
 * 
 * @export
 * @interface CmsBlock
 */
export interface CmsBlock {
    /**
     * 
     * @type {string}
     * @memberof CmsBlock
     */
    identifier?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CmsBlock
     */
    title?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CmsBlock
     */
    content?: string | null;
}
/**
 * 
 * @export
 * @interface CmsPage
 */
export interface CmsPage {
    /**
     * 
     * @type {string}
     * @memberof CmsPage
     */
    identifier?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CmsPage
     */
    title?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CmsPage
     */
    content?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CmsPage
     */
    metaKeywords?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CmsPage
     */
    metaDescription?: string | null;
}
/**
 * 
 * @export
 * @interface CreateOrderRequest
 */
export interface CreateOrderRequest {
    /**
     * 
     * @type {UserAddress}
     * @memberof CreateOrderRequest
     */
    shippingAddress?: UserAddress;
    /**
     * 
     * @type {UserAddress}
     * @memberof CreateOrderRequest
     */
    billingAddress?: UserAddress;
    /**
     * 
     * @type {string}
     * @memberof CreateOrderRequest
     */
    paymentMethod?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateOrderRequest
     */
    shippingMethod?: string | null;
    /**
     * 
     * @type {object}
     * @memberof CreateOrderRequest
     */
    paymentMethodExtra?: object | null;
}
/**
 * 
 * @export
 * @interface CreateReview
 */
export interface CreateReview {
    /**
     * 
     * @type {CreateReviewBody}
     * @memberof CreateReview
     */
    review?: CreateReviewBody;
}
/**
 * 
 * @export
 * @interface CreateReviewBody
 */
export interface CreateReviewBody {
    /**
     * 
     * @type {string}
     * @memberof CreateReviewBody
     */
    detail?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateReviewBody
     */
    nickname?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateReviewBody
     */
    productId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateReviewBody
     */
    title?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CreateReviewBody
     */
    score?: number;
}
/**
 * 
 * @export
 * @interface GetInvoicesHistoryResponse
 */
export interface GetInvoicesHistoryResponse {
    /**
     * 
     * @type {Array<Invoice>}
     * @memberof GetInvoicesHistoryResponse
     */
    items?: Array<Invoice> | null;
    /**
     * 
     * @type {number}
     * @memberof GetInvoicesHistoryResponse
     */
    totalCount?: number;
}
/**
 * 
 * @export
 * @interface GetOrderHistoryResponse
 */
export interface GetOrderHistoryResponse {
    /**
     * 
     * @type {string}
     * @memberof GetOrderHistoryResponse
     */
    orderId?: string | null;
    /**
     * 
     * @type {Array<CartTotal>}
     * @memberof GetOrderHistoryResponse
     */
    items?: Array<CartTotal> | null;
    /**
     * 
     * @type {number}
     * @memberof GetOrderHistoryResponse
     */
    totalCount?: number;
}
/**
 * 
 * @export
 * @interface GetQuoteHistoryResponse
 */
export interface GetQuoteHistoryResponse {
    /**
     * 
     * @type {Array<CartTotal>}
     * @memberof GetQuoteHistoryResponse
     */
    items?: Array<CartTotal> | null;
    /**
     * 
     * @type {number}
     * @memberof GetQuoteHistoryResponse
     */
    totalCount?: number;
}
/**
 * 
 * @export
 * @interface GroupedPrice
 */
export interface GroupedPrice {
    /**
     * 
     * @type {string}
     * @memberof GroupedPrice
     */
    customerGroups?: string | null;
    /**
     * 
     * @type {number}
     * @memberof GroupedPrice
     */
    price?: number;
    /**
     * 
     * @type {number}
     * @memberof GroupedPrice
     */
    priceInclTax?: number;
    /**
     * 
     * @type {number}
     * @memberof GroupedPrice
     */
    minQuantity?: number;
    /**
     * 
     * @type {Array<RangePrice>}
     * @memberof GroupedPrice
     */
    rangePrice?: Array<RangePrice> | null;
}
/**
 * 
 * @export
 * @interface Invoice
 */
export interface Invoice {
    /**
     * 
     * @type {string}
     * @memberof Invoice
     */
    orderNumber?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Invoice
     */
    invoiceNumber?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Invoice
     */
    pdfLink?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Invoice
     */
    paymentDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Invoice
     */
    paymentDueDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Invoice
     */
    status?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Invoice
     */
    amount?: number;
    /**
     * 
     * @type {string}
     * @memberof Invoice
     */
    currency?: string | null;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum LoginFailureReasonKind {
    NUMBER_0 = 0,
    NUMBER_1 = 1
}

/**
 * 
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    token?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    refresh?: string | null;
    /**
     * 
     * @type {LoginFailureReasonKind}
     * @memberof LoginResponse
     */
    failureReason?: LoginFailureReasonKind;
}
/**
 * 
 * @export
 * @interface MailSettingsEntry
 */
export interface MailSettingsEntry {
    /**
     * 
     * @type {string}
     * @memberof MailSettingsEntry
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MailSettingsEntry
     */
    displayName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MailSettingsEntry
     */
    description?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof MailSettingsEntry
     */
    subscribed?: boolean;
}
/**
 * 
 * @export
 * @interface Product
 */
export interface Product {
    [key: string]: object | any;

    /**
     * 
     * @type {number}
     * @memberof Product
     */
    displayPriceInclTax?: number;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    sku?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    updatedAt?: string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    createdAt?: string;
    /**
     * 
     * @type {Array<ProductCategory>}
     * @memberof Product
     */
    categories?: Array<ProductCategory> | null;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    urlPath?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    slug?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Product
     */
    buyable?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Product
     */
    visible?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    label?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    shortDescription?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    description?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    image?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    minQuantity?: number;
    /**
     * 
     * @type {Array<ProductProperty>}
     * @memberof Product
     */
    properties?: Array<ProductProperty> | null;
    /**
     * 
     * @type {Array<ProductImage>}
     * @memberof Product
     */
    images?: Array<ProductImage> | null;
    /**
     * 
     * @type {Array<ProductVariant>}
     * @memberof Product
     */
    variants?: Array<ProductVariant> | null;
    /**
     * 
     * @type {Array<ProductOption>}
     * @memberof Product
     */
    options?: Array<ProductOption> | null;
    /**
     * 
     * @type {Array<ProductBundleOption>}
     * @memberof Product
     */
    bundles?: Array<ProductBundleOption> | null;
    /**
     * 
     * @type {Array<GroupedPrice>}
     * @memberof Product
     */
    groupedPrices?: Array<GroupedPrice> | null;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    price?: number;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    priceInclTax?: number;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    specialFrom?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    specialTo?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    specialPrice?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    specialPriceInclTax?: number | null;
    /**
     * 
     * @type {ProductConfigType}
     * @memberof Product
     */
    type?: ProductConfigType;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    productType?: string | null;
    /**
     * 
     * @type {Array<RangePrice>}
     * @memberof Product
     */
    rangePrice?: Array<RangePrice> | null;
    /**
     * 
     * @type {Array<ProductCustomOption>}
     * @memberof Product
     */
    customOptions?: Array<ProductCustomOption> | null;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    numberOfReviews?: number;
    /**
     * 
     * @type {ProductRatingStatistics}
     * @memberof Product
     */
    ratings?: ProductRatingStatistics;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    stock?: number | null;
}
/**
 * 
 * @export
 * @interface ProductBundleOption
 */
export interface ProductBundleOption {
    /**
     * 
     * @type {string}
     * @memberof ProductBundleOption
     */
    id?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductBundleOption
     */
    position?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductBundleOption
     */
    title?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ProductBundleOption
     */
    required?: boolean;
    /**
     * 
     * @type {Array<ProductBundleOptionItem>}
     * @memberof ProductBundleOption
     */
    options?: Array<ProductBundleOptionItem> | null;
}
/**
 * 
 * @export
 * @interface ProductBundleOptionItem
 */
export interface ProductBundleOptionItem {
    /**
     * 
     * @type {number}
     * @memberof ProductBundleOptionItem
     */
    price?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ProductBundleOptionItem
     */
    quantity?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ProductBundleOptionItem
     */
    canChangeQuantity?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ProductBundleOptionItem
     */
    productId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductBundleOptionItem
     */
    productSku?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductBundleOptionItem
     */
    position?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ProductBundleOptionItem
     */
    isDefault?: boolean;
}
/**
 * 
 * @export
 * @interface ProductCategory
 */
export interface ProductCategory {
    [key: string]: object | any;

    /**
     * 
     * @type {string}
     * @memberof ProductCategory
     */
    id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductCategory
     */
    path?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductCategory
     */
    slug?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductCategory
     */
    label?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ProductCategory
     */
    primary?: boolean;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum ProductConfigType {
    NUMBER_0 = 0,
    NUMBER_1 = 1,
    NUMBER_2 = 2
}

/**
 * 
 * @export
 * @interface ProductCustomOption
 */
export interface ProductCustomOption {
    /**
     * 
     * @type {boolean}
     * @memberof ProductCustomOption
     */
    isRequired?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ProductCustomOption
     */
    id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductCustomOption
     */
    title?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductCustomOption
     */
    sortOrder?: number;
    /**
     * 
     * @type {ProductCustomOptionType}
     * @memberof ProductCustomOption
     */
    type?: ProductCustomOptionType;
    /**
     * 
     * @type {number}
     * @memberof ProductCustomOption
     */
    price?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof ProductCustomOption
     */
    priceIsPercentage?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ProductCustomOption
     */
    image?: string | null;
    /**
     * 
     * @type {Array<ProductCustomOptionValue>}
     * @memberof ProductCustomOption
     */
    values?: Array<ProductCustomOptionValue> | null;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum ProductCustomOptionType {
    NUMBER_0 = 0,
    NUMBER_1 = 1,
    NUMBER_2 = 2,
    NUMBER_3 = 3,
    NUMBER_4 = 4,
    NUMBER_5 = 5,
    NUMBER_6 = 6
}

/**
 * 
 * @export
 * @interface ProductCustomOptionValue
 */
export interface ProductCustomOptionValue {
    /**
     * 
     * @type {number}
     * @memberof ProductCustomOptionValue
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductCustomOptionValue
     */
    sortOrder?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductCustomOptionValue
     */
    title?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductCustomOptionValue
     */
    image?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductCustomOptionValue
     */
    price?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof ProductCustomOptionValue
     */
    priceIsPercentage?: boolean;
}
/**
 * 
 * @export
 * @interface ProductImage
 */
export interface ProductImage {
    /**
     * 
     * @type {string}
     * @memberof ProductImage
     */
    url?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductImage
     */
    sortOrder?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductImage
     */
    label?: string | null;
    /**
     * 
     * @type {Array<ProductImageVersion>}
     * @memberof ProductImage
     */
    versions?: Array<ProductImageVersion> | null;
}
/**
 * 
 * @export
 * @interface ProductImageVersion
 */
export interface ProductImageVersion {
    /**
     * 
     * @type {string}
     * @memberof ProductImageVersion
     */
    type?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductImageVersion
     */
    url?: string | null;
}
/**
 * 
 * @export
 * @interface ProductOption
 */
export interface ProductOption {
    /**
     * 
     * @type {string}
     * @memberof ProductOption
     */
    attributeCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductOption
     */
    attributeId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductOption
     */
    attributeLabel?: string | null;
    /**
     * 
     * @type {Array<ProductOptionValue>}
     * @memberof ProductOption
     */
    values?: Array<ProductOptionValue> | null;
}
/**
 * 
 * @export
 * @interface ProductOptionValue
 */
export interface ProductOptionValue {
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValue
     */
    label?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductOptionValue
     */
    value?: number;
}
/**
 * 
 * @export
 * @interface ProductPriceInfo
 */
export interface ProductPriceInfo {
    /**
     * 
     * @type {string}
     * @memberof ProductPriceInfo
     */
    id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductPriceInfo
     */
    sku?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductPriceInfo
     */
    finalPrice?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ProductPriceInfo
     */
    regularPrice?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ProductPriceInfo
     */
    specialPrice?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ProductPriceInfo
     */
    finalPriceInclTax?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ProductPriceInfo
     */
    regularPriceInclTax?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ProductPriceInfo
     */
    specialPriceInclTax?: number | null;
}
/**
 * 
 * @export
 * @interface ProductProperty
 */
export interface ProductProperty {
    /**
     * 
     * @type {string}
     * @memberof ProductProperty
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductProperty
     */
    displayName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductProperty
     */
    displayValue?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductProperty
     */
    stringValue?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductProperty
     */
    intValue?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ProductProperty
     */
    decimalValue?: number | null;
    /**
     * 
     * @type {Array<ProductProperty>}
     * @memberof ProductProperty
     */
    arrayValue?: Array<ProductProperty> | null;
    /**
     * 
     * @type {object}
     * @memberof ProductProperty
     */
    objectValue?: object | null;
}
/**
 * 
 * @export
 * @interface ProductRatingStatistics
 */
export interface ProductRatingStatistics {
    /**
     * 
     * @type {number}
     * @memberof ProductRatingStatistics
     */
    averageRating?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductRatingStatistics
     */
    lowestRating?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductRatingStatistics
     */
    highestRating?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductRatingStatistics
     */
    countRating0?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductRatingStatistics
     */
    countRating1?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductRatingStatistics
     */
    countRating2?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductRatingStatistics
     */
    countRating3?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductRatingStatistics
     */
    countRating4?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductRatingStatistics
     */
    countRating5?: number;
}
/**
 * 
 * @export
 * @interface ProductVariant
 */
export interface ProductVariant {
    /**
     * 
     * @type {string}
     * @memberof ProductVariant
     */
    id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductVariant
     */
    variantId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductVariant
     */
    sku?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductVariant
     */
    image?: string | null;
    /**
     * 
     * @type {Array<ProductProperty>}
     * @memberof ProductVariant
     */
    properties?: Array<ProductProperty> | null;
    /**
     * 
     * @type {Array<ProductImage>}
     * @memberof ProductVariant
     */
    images?: Array<ProductImage> | null;
    /**
     * 
     * @type {number}
     * @memberof ProductVariant
     */
    price?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductVariant
     */
    priceInclTax?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductVariant
     */
    minQuantity?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductVariant
     */
    specialFrom?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductVariant
     */
    specialTo?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductVariant
     */
    specialPrice?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ProductVariant
     */
    specialPriceInclTax?: number | null;
    /**
     * 
     * @type {Array<RangePrice>}
     * @memberof ProductVariant
     */
    rangePrice?: Array<RangePrice> | null;
    /**
     * 
     * @type {Array<GroupedPrice>}
     * @memberof ProductVariant
     */
    groupedPrices?: Array<GroupedPrice> | null;
    /**
     * 
     * @type {number}
     * @memberof ProductVariant
     */
    stock?: number | null;
}
/**
 * 
 * @export
 * @interface RangePrice
 */
export interface RangePrice {
    /**
     * 
     * @type {number}
     * @memberof RangePrice
     */
    minQuantity?: number;
    /**
     * 
     * @type {number}
     * @memberof RangePrice
     */
    price?: number;
    /**
     * 
     * @type {number}
     * @memberof RangePrice
     */
    priceInclTax?: number;
}
/**
 * 
 * @export
 * @interface ReorderCartResponse
 */
export interface ReorderCartResponse {
    /**
     * 
     * @type {CartTotal}
     * @memberof ReorderCartResponse
     */
    cart?: CartTotal;
    /**
     * 
     * @type {Array<CartItem>}
     * @memberof ReorderCartResponse
     */
    unavailableItems?: Array<CartItem> | null;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum RequestDoPaymentResponseType {
    NUMBER_0 = 0,
    NUMBER_1 = 1,
    NUMBER_2 = 2
}

/**
 * 
 * @export
 * @interface RequestPaymentSubMethodsResponse
 */
export interface RequestPaymentSubMethodsResponse {
    /**
     * 
     * @type {string}
     * @memberof RequestPaymentSubMethodsResponse
     */
    id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RequestPaymentSubMethodsResponse
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RequestPaymentSubMethodsResponse
     */
    image?: string | null;
}
/**
 * 
 * @export
 * @interface RequestStartPaymentResponse
 */
export interface RequestStartPaymentResponse {
    /**
     * 
     * @type {string}
     * @memberof RequestStartPaymentResponse
     */
    clientSecret?: string | null;
    /**
     * 
     * @type {RequestDoPaymentResponseType}
     * @memberof RequestStartPaymentResponse
     */
    type?: RequestDoPaymentResponseType;
    /**
     * 
     * @type {string}
     * @memberof RequestStartPaymentResponse
     */
    redirectURL?: string | null;
}
/**
 * 
 * @export
 * @interface ResolveUrlResult
 */
export interface ResolveUrlResult {
    /**
     * 
     * @type {ResolveUrlResultType}
     * @memberof ResolveUrlResult
     */
    type?: ResolveUrlResultType;
    /**
     * 
     * @type {Category}
     * @memberof ResolveUrlResult
     */
    category?: Category;
    /**
     * 
     * @type {Product}
     * @memberof ResolveUrlResult
     */
    product?: Product;
    /**
     * 
     * @type {CmsPage}
     * @memberof ResolveUrlResult
     */
    cms?: CmsPage;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum ResolveUrlResultType {
    NUMBER_0 = 0,
    NUMBER_1 = 1,
    NUMBER_2 = 2,
    NUMBER_3 = 3
}

/**
 * 
 * @export
 * @interface Review
 */
export interface Review {
    /**
     * 
     * @type {string}
     * @memberof Review
     */
    id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Review
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof Review
     */
    title?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Review
     */
    detail?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Review
     */
    nickname?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Review
     */
    productId?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Review
     */
    score?: number;
}
/**
 * 
 * @export
 * @interface SearchCategoriesResponse
 */
export interface SearchCategoriesResponse {
    /**
     * 
     * @type {Array<Category>}
     * @memberof SearchCategoriesResponse
     */
    items?: Array<Category> | null;
    /**
     * 
     * @type {number}
     * @memberof SearchCategoriesResponse
     */
    total?: number;
}
/**
 * 
 * @export
 * @interface SearchProductsResponse
 */
export interface SearchProductsResponse {
    /**
     * 
     * @type {number}
     * @memberof SearchProductsResponse
     */
    total?: number;
    /**
     * 
     * @type {Array<Product>}
     * @memberof SearchProductsResponse
     */
    items?: Array<Product> | null;
    /**
     * 
     * @type {Array<AggregateResponse>}
     * @memberof SearchProductsResponse
     */
    aggregates?: Array<AggregateResponse> | null;
    /**
     * 
     * @type {number}
     * @memberof SearchProductsResponse
     */
    maximumPrice?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchProductsResponse
     */
    minimumPrice?: number;
}
/**
 * 
 * @export
 * @interface SearchReviewsResponse
 */
export interface SearchReviewsResponse {
    /**
     * 
     * @type {number}
     * @memberof SearchReviewsResponse
     */
    total?: number;
    /**
     * 
     * @type {Array<Review>}
     * @memberof SearchReviewsResponse
     */
    items?: Array<Review> | null;
}
/**
 * 
 * @export
 * @interface SearchStockItem
 */
export interface SearchStockItem {
    /**
     * 
     * @type {string}
     * @memberof SearchStockItem
     */
    productID?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SearchStockItem
     */
    sku?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof SearchStockItem
     */
    inStock?: boolean;
    /**
     * 
     * @type {number}
     * @memberof SearchStockItem
     */
    stock?: number;
    /**
     * 
     * @type {Array<StockLeadTime>}
     * @memberof SearchStockItem
     */
    leadTimes?: Array<StockLeadTime> | null;
}
/**
 * 
 * @export
 * @interface SocialLogin
 */
export interface SocialLogin {
    /**
     * 
     * @type {string}
     * @memberof SocialLogin
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SocialLogin
     */
    description?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SocialLogin
     */
    image?: string | null;
}
/**
 * 
 * @export
 * @interface StockLeadTime
 */
export interface StockLeadTime {
    /**
     * 
     * @type {number}
     * @memberof StockLeadTime
     */
    quantity?: number;
    /**
     * 
     * @type {number}
     * @memberof StockLeadTime
     */
    days?: number;
}
/**
 * 
 * @export
 * @interface Tax
 */
export interface Tax {
    /**
     * 
     * @type {string}
     * @memberof Tax
     */
    id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Tax
     */
    name?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Tax
     */
    amount?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Tax
     */
    includedInPrice?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Tax
     */
    country?: string | null;
}
/**
 * 
 * @export
 * @interface UpdateAddressRequestData
 */
export interface UpdateAddressRequestData {
    /**
     * 
     * @type {UserAddress}
     * @memberof UpdateAddressRequestData
     */
    info?: UserAddress;
    /**
     * 
     * @type {UpdateUserAction}
     * @memberof UpdateAddressRequestData
     */
    action?: UpdateUserAction;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum UpdateUserAction {
    NUMBER_0 = 0,
    NUMBER_1 = 1,
    NUMBER_2 = 2
}

/**
 * 
 * @export
 * @interface UserAddress
 */
export interface UserAddress {
    /**
     * 
     * @type {string}
     * @memberof UserAddress
     */
    id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserAddress
     */
    countryCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserAddress
     */
    addressLine1?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserAddress
     */
    addressLine2?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserAddress
     */
    phone?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserAddress
     */
    postCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserAddress
     */
    city?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserAddress
     */
    firstName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserAddress
     */
    lastName?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof UserAddress
     */
    defaultShipping?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserAddress
     */
    defaultBilling?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserAddress
     */
    region?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserAddress
     */
    company?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserAddress
     */
    email?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserAddress
     */
    vatId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserAddress
     */
    streetNumber?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserAddress
     */
    streetNumberSuffix?: string | null;
}
/**
 * 
 * @export
 * @interface UserInfo
 */
export interface UserInfo {
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    email?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    firstName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    lastName?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UserInfo
     */
    storeId?: number;
    /**
     * 
     * @type {Array<UserAddress>}
     * @memberof UserInfo
     */
    addresses?: Array<UserAddress> | null;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    vatId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    group?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    branch?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    companyName?: string | null;
}
/**
 * 
 * @export
 * @interface WishList
 */
export interface WishList {
    /**
     * 
     * @type {string}
     * @memberof WishList
     */
    name?: string | null;
    /**
     * 
     * @type {Array<CartItem>}
     * @memberof WishList
     */
    list?: Array<CartItem> | null;
}
/**
 * 
 * @export
 * @interface WishListSummary
 */
export interface WishListSummary {
    /**
     * 
     * @type {string}
     * @memberof WishListSummary
     */
    name?: string | null;
    /**
     * 
     * @type {number}
     * @memberof WishListSummary
     */
    numberOfEntries?: number;
}

/**
 * CartApi - axios parameter creator
 * @export
 */
export const CartApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [token] 
         * @param {string} [cartId] 
         * @param {string} [coupon] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartApplyCouponPost(token?: string, cartId?: string, coupon?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/Cart/apply-coupon`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (cartId !== undefined) {
                localVarQueryParameter['cartId'] = cartId;
            }

            if (coupon !== undefined) {
                localVarQueryParameter['coupon'] = coupon;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [cartId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartCouponGet(token?: string, cartId?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/Cart/coupon`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (cartId !== undefined) {
                localVarQueryParameter['cartId'] = cartId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartCreatePost(token?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/Cart/create`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [cartId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartDeleteCouponPost(token?: string, cartId?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/Cart/delete-coupon`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (cartId !== undefined) {
                localVarQueryParameter['cartId'] = cartId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [cartId] 
         * @param {{ [key: string]: object; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartDeletePost(token?: string, cartId?: string, requestBody?: { [key: string]: object; }, options: any = {}): RequestArgs {
            const localVarPath = `/api/Cart/delete`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (cartId !== undefined) {
                localVarQueryParameter['cartId'] = cartId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [cartId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartPaymentMethodsGet(token?: string, cartId?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/Cart/payment-methods`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (cartId !== undefined) {
                localVarQueryParameter['cartId'] = cartId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [cartId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartPullGet(token?: string, cartId?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/Cart/pull`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (cartId !== undefined) {
                localVarQueryParameter['cartId'] = cartId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [cartId] 
         * @param {string} [orderId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartReOrderPost(token?: string, cartId?: string, orderId?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/Cart/re-order`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (cartId !== undefined) {
                localVarQueryParameter['cartId'] = cartId;
            }

            if (orderId !== undefined) {
                localVarQueryParameter['orderId'] = orderId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [cartId] 
         * @param {string} [carrierCode] 
         * @param {UserAddress} [userAddress] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartShippingInformationPost(token?: string, cartId?: string, carrierCode?: string, userAddress?: UserAddress, options: any = {}): RequestArgs {
            const localVarPath = `/api/Cart/shipping-information`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (cartId !== undefined) {
                localVarQueryParameter['cartId'] = cartId;
            }

            if (carrierCode !== undefined) {
                localVarQueryParameter['carrierCode'] = carrierCode;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof userAddress !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(userAddress !== undefined ? userAddress : {}) : (userAddress || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [cartId] 
         * @param {UserAddress} [userAddress] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartShippingMethodsPost(token?: string, cartId?: string, userAddress?: UserAddress, options: any = {}): RequestArgs {
            const localVarPath = `/api/Cart/shipping-methods`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (cartId !== undefined) {
                localVarQueryParameter['cartId'] = cartId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof userAddress !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(userAddress !== undefined ? userAddress : {}) : (userAddress || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [cartId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartTotalsGet(token?: string, cartId?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/Cart/totals`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (cartId !== undefined) {
                localVarQueryParameter['cartId'] = cartId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [cartId] 
         * @param {{ [key: string]: object; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartUpdatePost(token?: string, cartId?: string, requestBody?: { [key: string]: object; }, options: any = {}): RequestArgs {
            const localVarPath = `/api/Cart/update`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (cartId !== undefined) {
                localVarQueryParameter['cartId'] = cartId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartApi - functional programming interface
 * @export
 */
export const CartApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [token] 
         * @param {string} [cartId] 
         * @param {string} [coupon] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartApplyCouponPost(token?: string, cartId?: string, coupon?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = CartApiAxiosParamCreator(configuration).apiCartApplyCouponPost(token, cartId, coupon, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [cartId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartCouponGet(token?: string, cartId?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = CartApiAxiosParamCreator(configuration).apiCartCouponGet(token, cartId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartCreatePost(token?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = CartApiAxiosParamCreator(configuration).apiCartCreatePost(token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [cartId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartDeleteCouponPost(token?: string, cartId?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = CartApiAxiosParamCreator(configuration).apiCartDeleteCouponPost(token, cartId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [cartId] 
         * @param {{ [key: string]: object; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartDeletePost(token?: string, cartId?: string, requestBody?: { [key: string]: object; }, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = CartApiAxiosParamCreator(configuration).apiCartDeletePost(token, cartId, requestBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [cartId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartPaymentMethodsGet(token?: string, cartId?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CartPaymentMethod>> {
            const localVarAxiosArgs = CartApiAxiosParamCreator(configuration).apiCartPaymentMethodsGet(token, cartId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [cartId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartPullGet(token?: string, cartId?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CartItem>> {
            const localVarAxiosArgs = CartApiAxiosParamCreator(configuration).apiCartPullGet(token, cartId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [cartId] 
         * @param {string} [orderId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartReOrderPost(token?: string, cartId?: string, orderId?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReorderCartResponse> {
            const localVarAxiosArgs = CartApiAxiosParamCreator(configuration).apiCartReOrderPost(token, cartId, orderId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [cartId] 
         * @param {string} [carrierCode] 
         * @param {UserAddress} [userAddress] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartShippingInformationPost(token?: string, cartId?: string, carrierCode?: string, userAddress?: UserAddress, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CartTotal> {
            const localVarAxiosArgs = CartApiAxiosParamCreator(configuration).apiCartShippingInformationPost(token, cartId, carrierCode, userAddress, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [cartId] 
         * @param {UserAddress} [userAddress] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartShippingMethodsPost(token?: string, cartId?: string, userAddress?: UserAddress, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CartShippingMethod>> {
            const localVarAxiosArgs = CartApiAxiosParamCreator(configuration).apiCartShippingMethodsPost(token, cartId, userAddress, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [cartId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartTotalsGet(token?: string, cartId?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CartTotal> {
            const localVarAxiosArgs = CartApiAxiosParamCreator(configuration).apiCartTotalsGet(token, cartId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [cartId] 
         * @param {{ [key: string]: object; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartUpdatePost(token?: string, cartId?: string, requestBody?: { [key: string]: object; }, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CartItem> {
            const localVarAxiosArgs = CartApiAxiosParamCreator(configuration).apiCartUpdatePost(token, cartId, requestBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CartApi - factory interface
 * @export
 */
export const CartApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} [token] 
         * @param {string} [cartId] 
         * @param {string} [coupon] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartApplyCouponPost(token?: string, cartId?: string, coupon?: string, options?: any): AxiosPromise<boolean> {
            return CartApiFp(configuration).apiCartApplyCouponPost(token, cartId, coupon, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [cartId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartCouponGet(token?: string, cartId?: string, options?: any): AxiosPromise<string> {
            return CartApiFp(configuration).apiCartCouponGet(token, cartId, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartCreatePost(token?: string, options?: any): AxiosPromise<string> {
            return CartApiFp(configuration).apiCartCreatePost(token, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [cartId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartDeleteCouponPost(token?: string, cartId?: string, options?: any): AxiosPromise<boolean> {
            return CartApiFp(configuration).apiCartDeleteCouponPost(token, cartId, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [cartId] 
         * @param {{ [key: string]: object; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartDeletePost(token?: string, cartId?: string, requestBody?: { [key: string]: object; }, options?: any): AxiosPromise<boolean> {
            return CartApiFp(configuration).apiCartDeletePost(token, cartId, requestBody, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [cartId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartPaymentMethodsGet(token?: string, cartId?: string, options?: any): AxiosPromise<Array<CartPaymentMethod>> {
            return CartApiFp(configuration).apiCartPaymentMethodsGet(token, cartId, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [cartId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartPullGet(token?: string, cartId?: string, options?: any): AxiosPromise<Array<CartItem>> {
            return CartApiFp(configuration).apiCartPullGet(token, cartId, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [cartId] 
         * @param {string} [orderId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartReOrderPost(token?: string, cartId?: string, orderId?: string, options?: any): AxiosPromise<ReorderCartResponse> {
            return CartApiFp(configuration).apiCartReOrderPost(token, cartId, orderId, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [cartId] 
         * @param {string} [carrierCode] 
         * @param {UserAddress} [userAddress] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartShippingInformationPost(token?: string, cartId?: string, carrierCode?: string, userAddress?: UserAddress, options?: any): AxiosPromise<CartTotal> {
            return CartApiFp(configuration).apiCartShippingInformationPost(token, cartId, carrierCode, userAddress, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [cartId] 
         * @param {UserAddress} [userAddress] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartShippingMethodsPost(token?: string, cartId?: string, userAddress?: UserAddress, options?: any): AxiosPromise<Array<CartShippingMethod>> {
            return CartApiFp(configuration).apiCartShippingMethodsPost(token, cartId, userAddress, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [cartId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartTotalsGet(token?: string, cartId?: string, options?: any): AxiosPromise<CartTotal> {
            return CartApiFp(configuration).apiCartTotalsGet(token, cartId, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [cartId] 
         * @param {{ [key: string]: object; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCartUpdatePost(token?: string, cartId?: string, requestBody?: { [key: string]: object; }, options?: any): AxiosPromise<CartItem> {
            return CartApiFp(configuration).apiCartUpdatePost(token, cartId, requestBody, options)(axios, basePath);
        },
    };
};

/**
 * CartApi - object-oriented interface
 * @export
 * @class CartApi
 * @extends {BaseAPI}
 */
export class CartApi extends BaseAPI {
    /**
     * 
     * @param {string} [token] 
     * @param {string} [cartId] 
     * @param {string} [coupon] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApi
     */
    public apiCartApplyCouponPost(token?: string, cartId?: string, coupon?: string, options?: any) {
        return CartApiFp(this.configuration).apiCartApplyCouponPost(token, cartId, coupon, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [token] 
     * @param {string} [cartId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApi
     */
    public apiCartCouponGet(token?: string, cartId?: string, options?: any) {
        return CartApiFp(this.configuration).apiCartCouponGet(token, cartId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApi
     */
    public apiCartCreatePost(token?: string, options?: any) {
        return CartApiFp(this.configuration).apiCartCreatePost(token, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [token] 
     * @param {string} [cartId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApi
     */
    public apiCartDeleteCouponPost(token?: string, cartId?: string, options?: any) {
        return CartApiFp(this.configuration).apiCartDeleteCouponPost(token, cartId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [token] 
     * @param {string} [cartId] 
     * @param {{ [key: string]: object; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApi
     */
    public apiCartDeletePost(token?: string, cartId?: string, requestBody?: { [key: string]: object; }, options?: any) {
        return CartApiFp(this.configuration).apiCartDeletePost(token, cartId, requestBody, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [token] 
     * @param {string} [cartId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApi
     */
    public apiCartPaymentMethodsGet(token?: string, cartId?: string, options?: any) {
        return CartApiFp(this.configuration).apiCartPaymentMethodsGet(token, cartId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [token] 
     * @param {string} [cartId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApi
     */
    public apiCartPullGet(token?: string, cartId?: string, options?: any) {
        return CartApiFp(this.configuration).apiCartPullGet(token, cartId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [token] 
     * @param {string} [cartId] 
     * @param {string} [orderId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApi
     */
    public apiCartReOrderPost(token?: string, cartId?: string, orderId?: string, options?: any) {
        return CartApiFp(this.configuration).apiCartReOrderPost(token, cartId, orderId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [token] 
     * @param {string} [cartId] 
     * @param {string} [carrierCode] 
     * @param {UserAddress} [userAddress] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApi
     */
    public apiCartShippingInformationPost(token?: string, cartId?: string, carrierCode?: string, userAddress?: UserAddress, options?: any) {
        return CartApiFp(this.configuration).apiCartShippingInformationPost(token, cartId, carrierCode, userAddress, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [token] 
     * @param {string} [cartId] 
     * @param {UserAddress} [userAddress] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApi
     */
    public apiCartShippingMethodsPost(token?: string, cartId?: string, userAddress?: UserAddress, options?: any) {
        return CartApiFp(this.configuration).apiCartShippingMethodsPost(token, cartId, userAddress, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [token] 
     * @param {string} [cartId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApi
     */
    public apiCartTotalsGet(token?: string, cartId?: string, options?: any) {
        return CartApiFp(this.configuration).apiCartTotalsGet(token, cartId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [token] 
     * @param {string} [cartId] 
     * @param {{ [key: string]: object; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApi
     */
    public apiCartUpdatePost(token?: string, cartId?: string, requestBody?: { [key: string]: object; }, options?: any) {
        return CartApiFp(this.configuration).apiCartUpdatePost(token, cartId, requestBody, options)(this.axios, this.basePath);
    }

}


/**
 * CatalogApi - axios parameter creator
 * @export
 */
export const CatalogApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [token] 
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCatalogAttributesGet(token?: string, skip?: number, take?: number, options: any = {}): RequestArgs {
            const localVarPath = `/api/Catalog/Attributes`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {Array<number>} [levels] 
         * @param {boolean} [active] 
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {string} [parentId] 
         * @param {string} [slug] 
         * @param {Array<string>} [id] 
         * @param {string} [urlPath] 
         * @param {string} [sort] 
         * @param {string} [filter] 
         * @param {boolean} [includeTree] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCatalogCategoriesGet(token?: string, levels?: Array<number>, active?: boolean, skip?: number, take?: number, parentId?: string, slug?: string, id?: Array<string>, urlPath?: string, sort?: string, filter?: string, includeTree?: boolean, options: any = {}): RequestArgs {
            const localVarPath = `/api/Catalog/Categories`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (levels) {
                localVarQueryParameter['Levels'] = levels;
            }

            if (active !== undefined) {
                localVarQueryParameter['Active'] = active;
            }

            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }

            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }

            if (parentId !== undefined) {
                localVarQueryParameter['ParentId'] = parentId;
            }

            if (slug !== undefined) {
                localVarQueryParameter['Slug'] = slug;
            }

            if (id) {
                localVarQueryParameter['Id'] = id;
            }

            if (urlPath !== undefined) {
                localVarQueryParameter['UrlPath'] = urlPath;
            }

            if (sort !== undefined) {
                localVarQueryParameter['Sort'] = sort;
            }

            if (filter !== undefined) {
                localVarQueryParameter['Filter'] = filter;
            }

            if (includeTree !== undefined) {
                localVarQueryParameter['IncludeTree'] = includeTree;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCatalogCategoryTreeGet(token?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/Catalog/CategoryTree`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCatalogCmsBlockGet(token?: string, id?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/Catalog/CmsBlock`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCatalogCmsPageGet(token?: string, id?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/Catalog/CmsPage`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {Array<number>} [visibility] 
         * @param {Array<number>} [status] 
         * @param {Array<string>} [categoryId] 
         * @param {string} [filter] 
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {string} [urlpath] 
         * @param {string} [sort] 
         * @param {Array<string>} [sku] 
         * @param {Array<string>} [categoryKeywords] 
         * @param {Array<string>} [propertyFilters] 
         * @param {Array<AggregateField>} [aggregates] 
         * @param {Array<string>} [configurableChildren] 
         * @param {number} [minPrice] 
         * @param {number} [maxPrice] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCatalogProductsGet(token?: string, visibility?: Array<number>, status?: Array<number>, categoryId?: Array<string>, filter?: string, skip?: number, take?: number, urlpath?: string, sort?: string, sku?: Array<string>, categoryKeywords?: Array<string>, propertyFilters?: Array<string>, aggregates?: Array<AggregateField>, configurableChildren?: Array<string>, minPrice?: number, maxPrice?: number, options: any = {}): RequestArgs {
            const localVarPath = `/api/Catalog/Products`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (visibility) {
                localVarQueryParameter['Visibility'] = visibility;
            }

            if (status) {
                localVarQueryParameter['Status'] = status;
            }

            if (categoryId) {
                localVarQueryParameter['CategoryId'] = categoryId;
            }

            if (filter !== undefined) {
                localVarQueryParameter['Filter'] = filter;
            }

            if (skip !== undefined) {
                localVarQueryParameter['Skip'] = skip;
            }

            if (take !== undefined) {
                localVarQueryParameter['Take'] = take;
            }

            if (urlpath !== undefined) {
                localVarQueryParameter['Urlpath'] = urlpath;
            }

            if (sort !== undefined) {
                localVarQueryParameter['Sort'] = sort;
            }

            if (sku) {
                localVarQueryParameter['Sku'] = sku;
            }

            if (categoryKeywords) {
                localVarQueryParameter['CategoryKeywords'] = categoryKeywords;
            }

            if (propertyFilters) {
                localVarQueryParameter['PropertyFilters'] = propertyFilters;
            }

            if (aggregates) {
                localVarQueryParameter['Aggregates'] = aggregates;
            }

            if (configurableChildren) {
                localVarQueryParameter['ConfigurableChildren'] = configurableChildren;
            }

            if (minPrice !== undefined) {
                localVarQueryParameter['MinPrice'] = minPrice;
            }

            if (maxPrice !== undefined) {
                localVarQueryParameter['MaxPrice'] = maxPrice;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {Array<string>} [categories] 
         * @param {string} [sku] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCatalogRelatedProductsGet(token?: string, categories?: Array<string>, sku?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/Catalog/RelatedProducts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (categories) {
                localVarQueryParameter['categories'] = categories;
            }

            if (sku !== undefined) {
                localVarQueryParameter['sku'] = sku;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [url] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCatalogResolveSlugGet(token?: string, url?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/Catalog/ResolveSlug`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [productId] 
         * @param {number} [take] 
         * @param {number} [skip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCatalogReviewsGet(token?: string, productId?: string, take?: number, skip?: number, options: any = {}): RequestArgs {
            const localVarPath = `/api/Catalog/Reviews`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }

            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CatalogApi - functional programming interface
 * @export
 */
export const CatalogApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [token] 
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCatalogAttributesGet(token?: string, skip?: number, take?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Attribute>> {
            const localVarAxiosArgs = CatalogApiAxiosParamCreator(configuration).apiCatalogAttributesGet(token, skip, take, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {Array<number>} [levels] 
         * @param {boolean} [active] 
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {string} [parentId] 
         * @param {string} [slug] 
         * @param {Array<string>} [id] 
         * @param {string} [urlPath] 
         * @param {string} [sort] 
         * @param {string} [filter] 
         * @param {boolean} [includeTree] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCatalogCategoriesGet(token?: string, levels?: Array<number>, active?: boolean, skip?: number, take?: number, parentId?: string, slug?: string, id?: Array<string>, urlPath?: string, sort?: string, filter?: string, includeTree?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchCategoriesResponse> {
            const localVarAxiosArgs = CatalogApiAxiosParamCreator(configuration).apiCatalogCategoriesGet(token, levels, active, skip, take, parentId, slug, id, urlPath, sort, filter, includeTree, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCatalogCategoryTreeGet(token?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Category>> {
            const localVarAxiosArgs = CatalogApiAxiosParamCreator(configuration).apiCatalogCategoryTreeGet(token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCatalogCmsBlockGet(token?: string, id?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CmsBlock> {
            const localVarAxiosArgs = CatalogApiAxiosParamCreator(configuration).apiCatalogCmsBlockGet(token, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCatalogCmsPageGet(token?: string, id?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CmsPage> {
            const localVarAxiosArgs = CatalogApiAxiosParamCreator(configuration).apiCatalogCmsPageGet(token, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {Array<number>} [visibility] 
         * @param {Array<number>} [status] 
         * @param {Array<string>} [categoryId] 
         * @param {string} [filter] 
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {string} [urlpath] 
         * @param {string} [sort] 
         * @param {Array<string>} [sku] 
         * @param {Array<string>} [categoryKeywords] 
         * @param {Array<string>} [propertyFilters] 
         * @param {Array<AggregateField>} [aggregates] 
         * @param {Array<string>} [configurableChildren] 
         * @param {number} [minPrice] 
         * @param {number} [maxPrice] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCatalogProductsGet(token?: string, visibility?: Array<number>, status?: Array<number>, categoryId?: Array<string>, filter?: string, skip?: number, take?: number, urlpath?: string, sort?: string, sku?: Array<string>, categoryKeywords?: Array<string>, propertyFilters?: Array<string>, aggregates?: Array<AggregateField>, configurableChildren?: Array<string>, minPrice?: number, maxPrice?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchProductsResponse> {
            const localVarAxiosArgs = CatalogApiAxiosParamCreator(configuration).apiCatalogProductsGet(token, visibility, status, categoryId, filter, skip, take, urlpath, sort, sku, categoryKeywords, propertyFilters, aggregates, configurableChildren, minPrice, maxPrice, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {Array<string>} [categories] 
         * @param {string} [sku] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCatalogRelatedProductsGet(token?: string, categories?: Array<string>, sku?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Product>> {
            const localVarAxiosArgs = CatalogApiAxiosParamCreator(configuration).apiCatalogRelatedProductsGet(token, categories, sku, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [url] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCatalogResolveSlugGet(token?: string, url?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResolveUrlResult> {
            const localVarAxiosArgs = CatalogApiAxiosParamCreator(configuration).apiCatalogResolveSlugGet(token, url, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [productId] 
         * @param {number} [take] 
         * @param {number} [skip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCatalogReviewsGet(token?: string, productId?: string, take?: number, skip?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchReviewsResponse> {
            const localVarAxiosArgs = CatalogApiAxiosParamCreator(configuration).apiCatalogReviewsGet(token, productId, take, skip, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CatalogApi - factory interface
 * @export
 */
export const CatalogApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} [token] 
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCatalogAttributesGet(token?: string, skip?: number, take?: number, options?: any): AxiosPromise<Array<Attribute>> {
            return CatalogApiFp(configuration).apiCatalogAttributesGet(token, skip, take, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {Array<number>} [levels] 
         * @param {boolean} [active] 
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {string} [parentId] 
         * @param {string} [slug] 
         * @param {Array<string>} [id] 
         * @param {string} [urlPath] 
         * @param {string} [sort] 
         * @param {string} [filter] 
         * @param {boolean} [includeTree] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCatalogCategoriesGet(token?: string, levels?: Array<number>, active?: boolean, skip?: number, take?: number, parentId?: string, slug?: string, id?: Array<string>, urlPath?: string, sort?: string, filter?: string, includeTree?: boolean, options?: any): AxiosPromise<SearchCategoriesResponse> {
            return CatalogApiFp(configuration).apiCatalogCategoriesGet(token, levels, active, skip, take, parentId, slug, id, urlPath, sort, filter, includeTree, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCatalogCategoryTreeGet(token?: string, options?: any): AxiosPromise<Array<Category>> {
            return CatalogApiFp(configuration).apiCatalogCategoryTreeGet(token, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCatalogCmsBlockGet(token?: string, id?: string, options?: any): AxiosPromise<CmsBlock> {
            return CatalogApiFp(configuration).apiCatalogCmsBlockGet(token, id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCatalogCmsPageGet(token?: string, id?: string, options?: any): AxiosPromise<CmsPage> {
            return CatalogApiFp(configuration).apiCatalogCmsPageGet(token, id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {Array<number>} [visibility] 
         * @param {Array<number>} [status] 
         * @param {Array<string>} [categoryId] 
         * @param {string} [filter] 
         * @param {number} [skip] 
         * @param {number} [take] 
         * @param {string} [urlpath] 
         * @param {string} [sort] 
         * @param {Array<string>} [sku] 
         * @param {Array<string>} [categoryKeywords] 
         * @param {Array<string>} [propertyFilters] 
         * @param {Array<AggregateField>} [aggregates] 
         * @param {Array<string>} [configurableChildren] 
         * @param {number} [minPrice] 
         * @param {number} [maxPrice] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCatalogProductsGet(token?: string, visibility?: Array<number>, status?: Array<number>, categoryId?: Array<string>, filter?: string, skip?: number, take?: number, urlpath?: string, sort?: string, sku?: Array<string>, categoryKeywords?: Array<string>, propertyFilters?: Array<string>, aggregates?: Array<AggregateField>, configurableChildren?: Array<string>, minPrice?: number, maxPrice?: number, options?: any): AxiosPromise<SearchProductsResponse> {
            return CatalogApiFp(configuration).apiCatalogProductsGet(token, visibility, status, categoryId, filter, skip, take, urlpath, sort, sku, categoryKeywords, propertyFilters, aggregates, configurableChildren, minPrice, maxPrice, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {Array<string>} [categories] 
         * @param {string} [sku] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCatalogRelatedProductsGet(token?: string, categories?: Array<string>, sku?: string, options?: any): AxiosPromise<Array<Product>> {
            return CatalogApiFp(configuration).apiCatalogRelatedProductsGet(token, categories, sku, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [url] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCatalogResolveSlugGet(token?: string, url?: string, options?: any): AxiosPromise<ResolveUrlResult> {
            return CatalogApiFp(configuration).apiCatalogResolveSlugGet(token, url, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [productId] 
         * @param {number} [take] 
         * @param {number} [skip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCatalogReviewsGet(token?: string, productId?: string, take?: number, skip?: number, options?: any): AxiosPromise<SearchReviewsResponse> {
            return CatalogApiFp(configuration).apiCatalogReviewsGet(token, productId, take, skip, options)(axios, basePath);
        },
    };
};

/**
 * CatalogApi - object-oriented interface
 * @export
 * @class CatalogApi
 * @extends {BaseAPI}
 */
export class CatalogApi extends BaseAPI {
    /**
     * 
     * @param {string} [token] 
     * @param {number} [skip] 
     * @param {number} [take] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    public apiCatalogAttributesGet(token?: string, skip?: number, take?: number, options?: any) {
        return CatalogApiFp(this.configuration).apiCatalogAttributesGet(token, skip, take, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [token] 
     * @param {Array<number>} [levels] 
     * @param {boolean} [active] 
     * @param {number} [skip] 
     * @param {number} [take] 
     * @param {string} [parentId] 
     * @param {string} [slug] 
     * @param {Array<string>} [id] 
     * @param {string} [urlPath] 
     * @param {string} [sort] 
     * @param {string} [filter] 
     * @param {boolean} [includeTree] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    public apiCatalogCategoriesGet(token?: string, levels?: Array<number>, active?: boolean, skip?: number, take?: number, parentId?: string, slug?: string, id?: Array<string>, urlPath?: string, sort?: string, filter?: string, includeTree?: boolean, options?: any) {
        return CatalogApiFp(this.configuration).apiCatalogCategoriesGet(token, levels, active, skip, take, parentId, slug, id, urlPath, sort, filter, includeTree, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    public apiCatalogCategoryTreeGet(token?: string, options?: any) {
        return CatalogApiFp(this.configuration).apiCatalogCategoryTreeGet(token, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [token] 
     * @param {string} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    public apiCatalogCmsBlockGet(token?: string, id?: string, options?: any) {
        return CatalogApiFp(this.configuration).apiCatalogCmsBlockGet(token, id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [token] 
     * @param {string} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    public apiCatalogCmsPageGet(token?: string, id?: string, options?: any) {
        return CatalogApiFp(this.configuration).apiCatalogCmsPageGet(token, id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [token] 
     * @param {Array<number>} [visibility] 
     * @param {Array<number>} [status] 
     * @param {Array<string>} [categoryId] 
     * @param {string} [filter] 
     * @param {number} [skip] 
     * @param {number} [take] 
     * @param {string} [urlpath] 
     * @param {string} [sort] 
     * @param {Array<string>} [sku] 
     * @param {Array<string>} [categoryKeywords] 
     * @param {Array<string>} [propertyFilters] 
     * @param {Array<AggregateField>} [aggregates] 
     * @param {Array<string>} [configurableChildren] 
     * @param {number} [minPrice] 
     * @param {number} [maxPrice] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    public apiCatalogProductsGet(token?: string, visibility?: Array<number>, status?: Array<number>, categoryId?: Array<string>, filter?: string, skip?: number, take?: number, urlpath?: string, sort?: string, sku?: Array<string>, categoryKeywords?: Array<string>, propertyFilters?: Array<string>, aggregates?: Array<AggregateField>, configurableChildren?: Array<string>, minPrice?: number, maxPrice?: number, options?: any) {
        return CatalogApiFp(this.configuration).apiCatalogProductsGet(token, visibility, status, categoryId, filter, skip, take, urlpath, sort, sku, categoryKeywords, propertyFilters, aggregates, configurableChildren, minPrice, maxPrice, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [token] 
     * @param {Array<string>} [categories] 
     * @param {string} [sku] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    public apiCatalogRelatedProductsGet(token?: string, categories?: Array<string>, sku?: string, options?: any) {
        return CatalogApiFp(this.configuration).apiCatalogRelatedProductsGet(token, categories, sku, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [token] 
     * @param {string} [url] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    public apiCatalogResolveSlugGet(token?: string, url?: string, options?: any) {
        return CatalogApiFp(this.configuration).apiCatalogResolveSlugGet(token, url, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [token] 
     * @param {string} [productId] 
     * @param {number} [take] 
     * @param {number} [skip] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    public apiCatalogReviewsGet(token?: string, productId?: string, take?: number, skip?: number, options?: any) {
        return CatalogApiFp(this.configuration).apiCatalogReviewsGet(token, productId, take, skip, options)(this.axios, this.basePath);
    }

}


/**
 * LookupApi - axios parameter creator
 * @export
 */
export const LookupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [postcode] 
         * @param {string} [house] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupAddressPost(postcode?: string, house?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/Lookup/address`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (postcode !== undefined) {
                localVarQueryParameter['postcode'] = postcode;
            }

            if (house !== undefined) {
                localVarQueryParameter['house'] = house;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [search] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupCompanyPost(search?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/Lookup/company`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LookupApi - functional programming interface
 * @export
 */
export const LookupApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [postcode] 
         * @param {string} [house] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupAddressPost(postcode?: string, house?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserAddress> {
            const localVarAxiosArgs = LookupApiAxiosParamCreator(configuration).apiLookupAddressPost(postcode, house, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [search] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupCompanyPost(search?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserAddress>> {
            const localVarAxiosArgs = LookupApiAxiosParamCreator(configuration).apiLookupCompanyPost(search, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * LookupApi - factory interface
 * @export
 */
export const LookupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} [postcode] 
         * @param {string} [house] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupAddressPost(postcode?: string, house?: string, options?: any): AxiosPromise<UserAddress> {
            return LookupApiFp(configuration).apiLookupAddressPost(postcode, house, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [search] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLookupCompanyPost(search?: string, options?: any): AxiosPromise<Array<UserAddress>> {
            return LookupApiFp(configuration).apiLookupCompanyPost(search, options)(axios, basePath);
        },
    };
};

/**
 * LookupApi - object-oriented interface
 * @export
 * @class LookupApi
 * @extends {BaseAPI}
 */
export class LookupApi extends BaseAPI {
    /**
     * 
     * @param {string} [postcode] 
     * @param {string} [house] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LookupApi
     */
    public apiLookupAddressPost(postcode?: string, house?: string, options?: any) {
        return LookupApiFp(this.configuration).apiLookupAddressPost(postcode, house, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [search] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LookupApi
     */
    public apiLookupCompanyPost(search?: string, options?: any) {
        return LookupApiFp(this.configuration).apiLookupCompanyPost(search, options)(this.axios, this.basePath);
    }

}


/**
 * OrderApi - axios parameter creator
 * @export
 */
export const OrderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [token] 
         * @param {string} [cartId] 
         * @param {CreateOrderRequest} [createOrderRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderOrderPost(token?: string, cartId?: string, createOrderRequest?: CreateOrderRequest, options: any = {}): RequestArgs {
            const localVarPath = `/api/Order/order`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (cartId !== undefined) {
                localVarQueryParameter['cartId'] = cartId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof createOrderRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createOrderRequest !== undefined ? createOrderRequest : {}) : (createOrderRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [method] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderPaymentSubMethodsGet(method?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/Order/payment-sub-methods`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (method !== undefined) {
                localVarQueryParameter['method'] = method;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [invoiceID] 
         * @param {string} [paymentMethodId] 
         * @param {string} [subMethodPaymentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderStartPaymentPost(token?: string, invoiceID?: string, paymentMethodId?: string, subMethodPaymentId?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/Order/start-payment`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (invoiceID !== undefined) {
                localVarQueryParameter['invoiceID'] = invoiceID;
            }

            if (paymentMethodId !== undefined) {
                localVarQueryParameter['paymentMethodId'] = paymentMethodId;
            }

            if (subMethodPaymentId !== undefined) {
                localVarQueryParameter['subMethodPaymentId'] = subMethodPaymentId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderApi - functional programming interface
 * @export
 */
export const OrderApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [token] 
         * @param {string} [cartId] 
         * @param {CreateOrderRequest} [createOrderRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderOrderPost(token?: string, cartId?: string, createOrderRequest?: CreateOrderRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = OrderApiAxiosParamCreator(configuration).apiOrderOrderPost(token, cartId, createOrderRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [method] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderPaymentSubMethodsGet(method?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RequestPaymentSubMethodsResponse>> {
            const localVarAxiosArgs = OrderApiAxiosParamCreator(configuration).apiOrderPaymentSubMethodsGet(method, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [invoiceID] 
         * @param {string} [paymentMethodId] 
         * @param {string} [subMethodPaymentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderStartPaymentPost(token?: string, invoiceID?: string, paymentMethodId?: string, subMethodPaymentId?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RequestStartPaymentResponse> {
            const localVarAxiosArgs = OrderApiAxiosParamCreator(configuration).apiOrderStartPaymentPost(token, invoiceID, paymentMethodId, subMethodPaymentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * OrderApi - factory interface
 * @export
 */
export const OrderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} [token] 
         * @param {string} [cartId] 
         * @param {CreateOrderRequest} [createOrderRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderOrderPost(token?: string, cartId?: string, createOrderRequest?: CreateOrderRequest, options?: any): AxiosPromise<string> {
            return OrderApiFp(configuration).apiOrderOrderPost(token, cartId, createOrderRequest, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [method] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderPaymentSubMethodsGet(method?: string, options?: any): AxiosPromise<Array<RequestPaymentSubMethodsResponse>> {
            return OrderApiFp(configuration).apiOrderPaymentSubMethodsGet(method, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [invoiceID] 
         * @param {string} [paymentMethodId] 
         * @param {string} [subMethodPaymentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderStartPaymentPost(token?: string, invoiceID?: string, paymentMethodId?: string, subMethodPaymentId?: string, options?: any): AxiosPromise<RequestStartPaymentResponse> {
            return OrderApiFp(configuration).apiOrderStartPaymentPost(token, invoiceID, paymentMethodId, subMethodPaymentId, options)(axios, basePath);
        },
    };
};

/**
 * OrderApi - object-oriented interface
 * @export
 * @class OrderApi
 * @extends {BaseAPI}
 */
export class OrderApi extends BaseAPI {
    /**
     * 
     * @param {string} [token] 
     * @param {string} [cartId] 
     * @param {CreateOrderRequest} [createOrderRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public apiOrderOrderPost(token?: string, cartId?: string, createOrderRequest?: CreateOrderRequest, options?: any) {
        return OrderApiFp(this.configuration).apiOrderOrderPost(token, cartId, createOrderRequest, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [method] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public apiOrderPaymentSubMethodsGet(method?: string, options?: any) {
        return OrderApiFp(this.configuration).apiOrderPaymentSubMethodsGet(method, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [token] 
     * @param {string} [invoiceID] 
     * @param {string} [paymentMethodId] 
     * @param {string} [subMethodPaymentId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public apiOrderStartPaymentPost(token?: string, invoiceID?: string, paymentMethodId?: string, subMethodPaymentId?: string, options?: any) {
        return OrderApiFp(this.configuration).apiOrderStartPaymentPost(token, invoiceID, paymentMethodId, subMethodPaymentId, options)(this.axios, this.basePath);
    }

}


/**
 * ProductApi - axios parameter creator
 * @export
 */
export const ProductApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [skus] 
         * @param {string} [currencyCode] 
         * @param {number} [storeId] 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductRenderListGet(skus?: string, currencyCode?: string, storeId?: number, token?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/Product/render-list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (skus !== undefined) {
                localVarQueryParameter['skus'] = skus;
            }

            if (currencyCode !== undefined) {
                localVarQueryParameter['currencyCode'] = currencyCode;
            }

            if (storeId !== undefined) {
                localVarQueryParameter['storeId'] = storeId;
            }

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductApi - functional programming interface
 * @export
 */
export const ProductApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [skus] 
         * @param {string} [currencyCode] 
         * @param {number} [storeId] 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductRenderListGet(skus?: string, currencyCode?: string, storeId?: number, token?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductPriceInfo>> {
            const localVarAxiosArgs = ProductApiAxiosParamCreator(configuration).apiProductRenderListGet(skus, currencyCode, storeId, token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ProductApi - factory interface
 * @export
 */
export const ProductApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} [skus] 
         * @param {string} [currencyCode] 
         * @param {number} [storeId] 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductRenderListGet(skus?: string, currencyCode?: string, storeId?: number, token?: string, options?: any): AxiosPromise<Array<ProductPriceInfo>> {
            return ProductApiFp(configuration).apiProductRenderListGet(skus, currencyCode, storeId, token, options)(axios, basePath);
        },
    };
};

/**
 * ProductApi - object-oriented interface
 * @export
 * @class ProductApi
 * @extends {BaseAPI}
 */
export class ProductApi extends BaseAPI {
    /**
     * 
     * @param {string} [skus] 
     * @param {string} [currencyCode] 
     * @param {number} [storeId] 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public apiProductRenderListGet(skus?: string, currencyCode?: string, storeId?: number, token?: string, options?: any) {
        return ProductApiFp(this.configuration).apiProductRenderListGet(skus, currencyCode, storeId, token, options)(this.axios, this.basePath);
    }

}


/**
 * ReviewApi - axios parameter creator
 * @export
 */
export const ReviewApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [token] 
         * @param {CreateReview} [createReview] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReviewCreatePost(token?: string, createReview?: CreateReview, options: any = {}): RequestArgs {
            const localVarPath = `/api/Review/create`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof createReview !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createReview !== undefined ? createReview : {}) : (createReview || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReviewApi - functional programming interface
 * @export
 */
export const ReviewApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [token] 
         * @param {CreateReview} [createReview] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReviewCreatePost(token?: string, createReview?: CreateReview, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = ReviewApiAxiosParamCreator(configuration).apiReviewCreatePost(token, createReview, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ReviewApi - factory interface
 * @export
 */
export const ReviewApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} [token] 
         * @param {CreateReview} [createReview] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiReviewCreatePost(token?: string, createReview?: CreateReview, options?: any): AxiosPromise<boolean> {
            return ReviewApiFp(configuration).apiReviewCreatePost(token, createReview, options)(axios, basePath);
        },
    };
};

/**
 * ReviewApi - object-oriented interface
 * @export
 * @class ReviewApi
 * @extends {BaseAPI}
 */
export class ReviewApi extends BaseAPI {
    /**
     * 
     * @param {string} [token] 
     * @param {CreateReview} [createReview] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewApi
     */
    public apiReviewCreatePost(token?: string, createReview?: CreateReview, options?: any) {
        return ReviewApiFp(this.configuration).apiReviewCreatePost(token, createReview, options)(this.axios, this.basePath);
    }

}


/**
 * SocialUserApi - axios parameter creator
 * @export
 */
export const SocialUserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSocialUserSocialLoginResolveKeyPost(key?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/SocialUser/socialLoginResolveKey`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSocialUserSocialLoginsGet(options: any = {}): RequestArgs {
            const localVarPath = `/api/SocialUser/socialLogins`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SocialUserApi - functional programming interface
 * @export
 */
export const SocialUserApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSocialUserSocialLoginResolveKeyPost(key?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse> {
            const localVarAxiosArgs = SocialUserApiAxiosParamCreator(configuration).apiSocialUserSocialLoginResolveKeyPost(key, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSocialUserSocialLoginsGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SocialLogin>> {
            const localVarAxiosArgs = SocialUserApiAxiosParamCreator(configuration).apiSocialUserSocialLoginsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SocialUserApi - factory interface
 * @export
 */
export const SocialUserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSocialUserSocialLoginResolveKeyPost(key?: string, options?: any): AxiosPromise<LoginResponse> {
            return SocialUserApiFp(configuration).apiSocialUserSocialLoginResolveKeyPost(key, options)(axios, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSocialUserSocialLoginsGet(options?: any): AxiosPromise<Array<SocialLogin>> {
            return SocialUserApiFp(configuration).apiSocialUserSocialLoginsGet(options)(axios, basePath);
        },
    };
};

/**
 * SocialUserApi - object-oriented interface
 * @export
 * @class SocialUserApi
 * @extends {BaseAPI}
 */
export class SocialUserApi extends BaseAPI {
    /**
     * 
     * @param {string} [key] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialUserApi
     */
    public apiSocialUserSocialLoginResolveKeyPost(key?: string, options?: any) {
        return SocialUserApiFp(this.configuration).apiSocialUserSocialLoginResolveKeyPost(key, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialUserApi
     */
    public apiSocialUserSocialLoginsGet(options?: any) {
        return SocialUserApiFp(this.configuration).apiSocialUserSocialLoginsGet(options)(this.axios, this.basePath);
    }

}


/**
 * StockApi - axios parameter creator
 * @export
 */
export const StockApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [sku] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStockCheckGet(sku?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/Stock/check`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sku !== undefined) {
                localVarQueryParameter['sku'] = sku;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStockListPost(body?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/Stock/list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StockApi - functional programming interface
 * @export
 */
export const StockApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [sku] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStockCheckGet(sku?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SearchStockItem>> {
            const localVarAxiosArgs = StockApiAxiosParamCreator(configuration).apiStockCheckGet(sku, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStockListPost(body?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SearchStockItem>> {
            const localVarAxiosArgs = StockApiAxiosParamCreator(configuration).apiStockListPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * StockApi - factory interface
 * @export
 */
export const StockApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} [sku] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStockCheckGet(sku?: string, options?: any): AxiosPromise<Array<SearchStockItem>> {
            return StockApiFp(configuration).apiStockCheckGet(sku, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStockListPost(body?: string, options?: any): AxiosPromise<Array<SearchStockItem>> {
            return StockApiFp(configuration).apiStockListPost(body, options)(axios, basePath);
        },
    };
};

/**
 * StockApi - object-oriented interface
 * @export
 * @class StockApi
 * @extends {BaseAPI}
 */
export class StockApi extends BaseAPI {
    /**
     * 
     * @param {string} [sku] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApi
     */
    public apiStockCheckGet(sku?: string, options?: any) {
        return StockApiFp(this.configuration).apiStockCheckGet(sku, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApi
     */
    public apiStockListPost(body?: string, options?: any) {
        return StockApiFp(this.configuration).apiStockListPost(body, options)(this.axios, this.basePath);
    }

}


/**
 * TaxApi - axios parameter creator
 * @export
 */
export const TaxApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTaxCurrentTaxGet(token?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/Tax/CurrentTax`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaxApi - functional programming interface
 * @export
 */
export const TaxApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTaxCurrentTaxGet(token?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tax> {
            const localVarAxiosArgs = TaxApiAxiosParamCreator(configuration).apiTaxCurrentTaxGet(token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TaxApi - factory interface
 * @export
 */
export const TaxApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTaxCurrentTaxGet(token?: string, options?: any): AxiosPromise<Tax> {
            return TaxApiFp(configuration).apiTaxCurrentTaxGet(token, options)(axios, basePath);
        },
    };
};

/**
 * TaxApi - object-oriented interface
 * @export
 * @class TaxApi
 * @extends {BaseAPI}
 */
export class TaxApi extends BaseAPI {
    /**
     * 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxApi
     */
    public apiTaxCurrentTaxGet(token?: string, options?: any) {
        return TaxApiFp(this.configuration).apiTaxCurrentTaxGet(token, options)(this.axios, this.basePath);
    }

}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [token] 
         * @param {string} [currentPassword] 
         * @param {string} [newPassword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserChangePasswordPost(token?: string, currentPassword?: string, newPassword?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/User/change-password`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (currentPassword !== undefined) {
                localVarQueryParameter['currentPassword'] = currentPassword;
            }

            if (newPassword !== undefined) {
                localVarQueryParameter['newPassword'] = newPassword;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [email] 
         * @param {string} [newPassword] 
         * @param {string} [resetToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserCreatePasswordPost(email?: string, newPassword?: string, resetToken?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/User/create-password`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (newPassword !== undefined) {
                localVarQueryParameter['newPassword'] = newPassword;
            }

            if (resetToken !== undefined) {
                localVarQueryParameter['resetToken'] = resetToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [firstname] 
         * @param {string} [lastname] 
         * @param {string} [email] 
         * @param {string} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserCreatePost(firstname?: string, lastname?: string, email?: string, password?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/User/create`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (firstname !== undefined) {
                localVarQueryParameter['firstname'] = firstname;
            }

            if (lastname !== undefined) {
                localVarQueryParameter['lastname'] = lastname;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {number} [skip] 
         * @param {boolean} [open] 
         * @param {string} [invoiceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserInvoicesHistoryGet(token?: string, skip?: number, open?: boolean, invoiceId?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/User/invoices-history`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (open !== undefined) {
                localVarQueryParameter['open'] = open;
            }

            if (invoiceId !== undefined) {
                localVarQueryParameter['invoiceId'] = invoiceId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [username] 
         * @param {string} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserLoginPost(username?: string, password?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/User/login`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserMaillingsGet(token?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/User/maillings`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [mailling] 
         * @param {boolean} [subscribe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserMaillingsPost(token?: string, mailling?: string, subscribe?: boolean, options: any = {}): RequestArgs {
            const localVarPath = `/api/User/maillings`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (mailling !== undefined) {
                localVarQueryParameter['mailling'] = mailling;
            }

            if (subscribe !== undefined) {
                localVarQueryParameter['subscribe'] = subscribe;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserMeGet(token?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/User/me`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {UserInfo} [userInfo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserMePost(token?: string, userInfo?: UserInfo, options: any = {}): RequestArgs {
            const localVarPath = `/api/User/me`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof userInfo !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(userInfo !== undefined ? userInfo : {}) : (userInfo || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {UpdateAddressRequestData} [updateAddressRequestData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserMyAddressPost(token?: string, updateAddressRequestData?: UpdateAddressRequestData, options: any = {}): RequestArgs {
            const localVarPath = `/api/User/my-address`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof updateAddressRequestData !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(updateAddressRequestData !== undefined ? updateAddressRequestData : {}) : (updateAddressRequestData || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {number} [skip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserOfferHistoryGet(token?: string, skip?: number, options: any = {}): RequestArgs {
            const localVarPath = `/api/User/offer-history`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {number} [skip] 
         * @param {boolean} [open] 
         * @param {string} [orderId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserOrderHistoryGet(token?: string, skip?: number, open?: boolean, orderId?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/User/order-history`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (open !== undefined) {
                localVarQueryParameter['open'] = open;
            }

            if (orderId !== undefined) {
                localVarQueryParameter['orderId'] = orderId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [refreshToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserRefreshPost(refreshToken?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/User/refresh`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (refreshToken !== undefined) {
                localVarQueryParameter['refreshToken'] = refreshToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [email] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserResetPasswordPost(email?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/User/reset-password`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserUserDelete(token?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/User/user`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [token] 
         * @param {string} [currentPassword] 
         * @param {string} [newPassword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserChangePasswordPost(token?: string, currentPassword?: string, newPassword?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).apiUserChangePasswordPost(token, currentPassword, newPassword, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [email] 
         * @param {string} [newPassword] 
         * @param {string} [resetToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserCreatePasswordPost(email?: string, newPassword?: string, resetToken?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).apiUserCreatePasswordPost(email, newPassword, resetToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [firstname] 
         * @param {string} [lastname] 
         * @param {string} [email] 
         * @param {string} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserCreatePost(firstname?: string, lastname?: string, email?: string, password?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserInfo> {
            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).apiUserCreatePost(firstname, lastname, email, password, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {number} [skip] 
         * @param {boolean} [open] 
         * @param {string} [invoiceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserInvoicesHistoryGet(token?: string, skip?: number, open?: boolean, invoiceId?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetInvoicesHistoryResponse> {
            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).apiUserInvoicesHistoryGet(token, skip, open, invoiceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [username] 
         * @param {string} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserLoginPost(username?: string, password?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse> {
            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).apiUserLoginPost(username, password, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserMaillingsGet(token?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MailSettingsEntry>> {
            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).apiUserMaillingsGet(token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [mailling] 
         * @param {boolean} [subscribe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserMaillingsPost(token?: string, mailling?: string, subscribe?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).apiUserMaillingsPost(token, mailling, subscribe, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserMeGet(token?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserInfo> {
            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).apiUserMeGet(token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {UserInfo} [userInfo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserMePost(token?: string, userInfo?: UserInfo, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).apiUserMePost(token, userInfo, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {UpdateAddressRequestData} [updateAddressRequestData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserMyAddressPost(token?: string, updateAddressRequestData?: UpdateAddressRequestData, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserInfo> {
            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).apiUserMyAddressPost(token, updateAddressRequestData, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {number} [skip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserOfferHistoryGet(token?: string, skip?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetQuoteHistoryResponse> {
            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).apiUserOfferHistoryGet(token, skip, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {number} [skip] 
         * @param {boolean} [open] 
         * @param {string} [orderId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserOrderHistoryGet(token?: string, skip?: number, open?: boolean, orderId?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrderHistoryResponse> {
            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).apiUserOrderHistoryGet(token, skip, open, orderId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [refreshToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserRefreshPost(refreshToken?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).apiUserRefreshPost(refreshToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [email] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserResetPasswordPost(email?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).apiUserResetPasswordPost(email, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserUserDelete(token?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean> {
            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).apiUserUserDelete(token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} [token] 
         * @param {string} [currentPassword] 
         * @param {string} [newPassword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserChangePasswordPost(token?: string, currentPassword?: string, newPassword?: string, options?: any): AxiosPromise<void> {
            return UserApiFp(configuration).apiUserChangePasswordPost(token, currentPassword, newPassword, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [email] 
         * @param {string} [newPassword] 
         * @param {string} [resetToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserCreatePasswordPost(email?: string, newPassword?: string, resetToken?: string, options?: any): AxiosPromise<void> {
            return UserApiFp(configuration).apiUserCreatePasswordPost(email, newPassword, resetToken, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [firstname] 
         * @param {string} [lastname] 
         * @param {string} [email] 
         * @param {string} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserCreatePost(firstname?: string, lastname?: string, email?: string, password?: string, options?: any): AxiosPromise<UserInfo> {
            return UserApiFp(configuration).apiUserCreatePost(firstname, lastname, email, password, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {number} [skip] 
         * @param {boolean} [open] 
         * @param {string} [invoiceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserInvoicesHistoryGet(token?: string, skip?: number, open?: boolean, invoiceId?: string, options?: any): AxiosPromise<GetInvoicesHistoryResponse> {
            return UserApiFp(configuration).apiUserInvoicesHistoryGet(token, skip, open, invoiceId, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [username] 
         * @param {string} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserLoginPost(username?: string, password?: string, options?: any): AxiosPromise<LoginResponse> {
            return UserApiFp(configuration).apiUserLoginPost(username, password, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserMaillingsGet(token?: string, options?: any): AxiosPromise<Array<MailSettingsEntry>> {
            return UserApiFp(configuration).apiUserMaillingsGet(token, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [mailling] 
         * @param {boolean} [subscribe] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserMaillingsPost(token?: string, mailling?: string, subscribe?: boolean, options?: any): AxiosPromise<void> {
            return UserApiFp(configuration).apiUserMaillingsPost(token, mailling, subscribe, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserMeGet(token?: string, options?: any): AxiosPromise<UserInfo> {
            return UserApiFp(configuration).apiUserMeGet(token, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {UserInfo} [userInfo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserMePost(token?: string, userInfo?: UserInfo, options?: any): AxiosPromise<void> {
            return UserApiFp(configuration).apiUserMePost(token, userInfo, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {UpdateAddressRequestData} [updateAddressRequestData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserMyAddressPost(token?: string, updateAddressRequestData?: UpdateAddressRequestData, options?: any): AxiosPromise<UserInfo> {
            return UserApiFp(configuration).apiUserMyAddressPost(token, updateAddressRequestData, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {number} [skip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserOfferHistoryGet(token?: string, skip?: number, options?: any): AxiosPromise<GetQuoteHistoryResponse> {
            return UserApiFp(configuration).apiUserOfferHistoryGet(token, skip, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {number} [skip] 
         * @param {boolean} [open] 
         * @param {string} [orderId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserOrderHistoryGet(token?: string, skip?: number, open?: boolean, orderId?: string, options?: any): AxiosPromise<GetOrderHistoryResponse> {
            return UserApiFp(configuration).apiUserOrderHistoryGet(token, skip, open, orderId, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [refreshToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserRefreshPost(refreshToken?: string, options?: any): AxiosPromise<string> {
            return UserApiFp(configuration).apiUserRefreshPost(refreshToken, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [email] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserResetPasswordPost(email?: string, options?: any): AxiosPromise<void> {
            return UserApiFp(configuration).apiUserResetPasswordPost(email, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserUserDelete(token?: string, options?: any): AxiosPromise<boolean> {
            return UserApiFp(configuration).apiUserUserDelete(token, options)(axios, basePath);
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param {string} [token] 
     * @param {string} [currentPassword] 
     * @param {string} [newPassword] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserChangePasswordPost(token?: string, currentPassword?: string, newPassword?: string, options?: any) {
        return UserApiFp(this.configuration).apiUserChangePasswordPost(token, currentPassword, newPassword, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [email] 
     * @param {string} [newPassword] 
     * @param {string} [resetToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserCreatePasswordPost(email?: string, newPassword?: string, resetToken?: string, options?: any) {
        return UserApiFp(this.configuration).apiUserCreatePasswordPost(email, newPassword, resetToken, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [firstname] 
     * @param {string} [lastname] 
     * @param {string} [email] 
     * @param {string} [password] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserCreatePost(firstname?: string, lastname?: string, email?: string, password?: string, options?: any) {
        return UserApiFp(this.configuration).apiUserCreatePost(firstname, lastname, email, password, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [token] 
     * @param {number} [skip] 
     * @param {boolean} [open] 
     * @param {string} [invoiceId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserInvoicesHistoryGet(token?: string, skip?: number, open?: boolean, invoiceId?: string, options?: any) {
        return UserApiFp(this.configuration).apiUserInvoicesHistoryGet(token, skip, open, invoiceId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [username] 
     * @param {string} [password] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserLoginPost(username?: string, password?: string, options?: any) {
        return UserApiFp(this.configuration).apiUserLoginPost(username, password, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserMaillingsGet(token?: string, options?: any) {
        return UserApiFp(this.configuration).apiUserMaillingsGet(token, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [token] 
     * @param {string} [mailling] 
     * @param {boolean} [subscribe] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserMaillingsPost(token?: string, mailling?: string, subscribe?: boolean, options?: any) {
        return UserApiFp(this.configuration).apiUserMaillingsPost(token, mailling, subscribe, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserMeGet(token?: string, options?: any) {
        return UserApiFp(this.configuration).apiUserMeGet(token, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [token] 
     * @param {UserInfo} [userInfo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserMePost(token?: string, userInfo?: UserInfo, options?: any) {
        return UserApiFp(this.configuration).apiUserMePost(token, userInfo, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [token] 
     * @param {UpdateAddressRequestData} [updateAddressRequestData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserMyAddressPost(token?: string, updateAddressRequestData?: UpdateAddressRequestData, options?: any) {
        return UserApiFp(this.configuration).apiUserMyAddressPost(token, updateAddressRequestData, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [token] 
     * @param {number} [skip] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserOfferHistoryGet(token?: string, skip?: number, options?: any) {
        return UserApiFp(this.configuration).apiUserOfferHistoryGet(token, skip, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [token] 
     * @param {number} [skip] 
     * @param {boolean} [open] 
     * @param {string} [orderId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserOrderHistoryGet(token?: string, skip?: number, open?: boolean, orderId?: string, options?: any) {
        return UserApiFp(this.configuration).apiUserOrderHistoryGet(token, skip, open, orderId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [refreshToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserRefreshPost(refreshToken?: string, options?: any) {
        return UserApiFp(this.configuration).apiUserRefreshPost(refreshToken, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [email] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserResetPasswordPost(email?: string, options?: any) {
        return UserApiFp(this.configuration).apiUserResetPasswordPost(email, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [token] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserUserDelete(token?: string, options?: any) {
        return UserApiFp(this.configuration).apiUserUserDelete(token, options)(this.axios, this.basePath);
    }

}


/**
 * WishlistApi - axios parameter creator
 * @export
 */
export const WishlistApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [token] 
         * @param {string} [anonid] 
         * @param {string} [name] 
         * @param {{ [key: string]: object; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWishlistAdditemPost(token?: string, anonid?: string, name?: string, requestBody?: { [key: string]: object; }, options: any = {}): RequestArgs {
            const localVarPath = `/api/Wishlist/additem`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (anonid !== undefined) {
                localVarQueryParameter['anonid'] = anonid;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWishlistAnonidPost(options: any = {}): RequestArgs {
            const localVarPath = `/api/Wishlist/anonid`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [anonid] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWishlistClearDelete(token?: string, anonid?: string, name?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/Wishlist/clear`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (anonid !== undefined) {
                localVarQueryParameter['anonid'] = anonid;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [anonid] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWishlistCreatePut(token?: string, anonid?: string, name?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/Wishlist/create`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (anonid !== undefined) {
                localVarQueryParameter['anonid'] = anonid;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [anonid] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWishlistDeleteDelete(token?: string, anonid?: string, name?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/Wishlist/delete`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (anonid !== undefined) {
                localVarQueryParameter['anonid'] = anonid;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [anonid] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWishlistGetGet(token?: string, anonid?: string, name?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/Wishlist/get`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (anonid !== undefined) {
                localVarQueryParameter['anonid'] = anonid;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [anonid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWishlistListGet(token?: string, anonid?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/Wishlist/list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (anonid !== undefined) {
                localVarQueryParameter['anonid'] = anonid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [anonid] 
         * @param {string} [name] 
         * @param {{ [key: string]: object; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWishlistRemoveitemDelete(token?: string, anonid?: string, name?: string, requestBody?: { [key: string]: object; }, options: any = {}): RequestArgs {
            const localVarPath = `/api/Wishlist/removeitem`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (anonid !== undefined) {
                localVarQueryParameter['anonid'] = anonid;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WishlistApi - functional programming interface
 * @export
 */
export const WishlistApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [token] 
         * @param {string} [anonid] 
         * @param {string} [name] 
         * @param {{ [key: string]: object; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWishlistAdditemPost(token?: string, anonid?: string, name?: string, requestBody?: { [key: string]: object; }, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<WishList> {
            const localVarAxiosArgs = WishlistApiAxiosParamCreator(configuration).apiWishlistAdditemPost(token, anonid, name, requestBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWishlistAnonidPost(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = WishlistApiAxiosParamCreator(configuration).apiWishlistAnonidPost(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [anonid] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWishlistClearDelete(token?: string, anonid?: string, name?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = WishlistApiAxiosParamCreator(configuration).apiWishlistClearDelete(token, anonid, name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [anonid] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWishlistCreatePut(token?: string, anonid?: string, name?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<WishList> {
            const localVarAxiosArgs = WishlistApiAxiosParamCreator(configuration).apiWishlistCreatePut(token, anonid, name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [anonid] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWishlistDeleteDelete(token?: string, anonid?: string, name?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = WishlistApiAxiosParamCreator(configuration).apiWishlistDeleteDelete(token, anonid, name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [anonid] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWishlistGetGet(token?: string, anonid?: string, name?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<WishList> {
            const localVarAxiosArgs = WishlistApiAxiosParamCreator(configuration).apiWishlistGetGet(token, anonid, name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [anonid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWishlistListGet(token?: string, anonid?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WishListSummary>> {
            const localVarAxiosArgs = WishlistApiAxiosParamCreator(configuration).apiWishlistListGet(token, anonid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [anonid] 
         * @param {string} [name] 
         * @param {{ [key: string]: object; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWishlistRemoveitemDelete(token?: string, anonid?: string, name?: string, requestBody?: { [key: string]: object; }, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<WishList> {
            const localVarAxiosArgs = WishlistApiAxiosParamCreator(configuration).apiWishlistRemoveitemDelete(token, anonid, name, requestBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * WishlistApi - factory interface
 * @export
 */
export const WishlistApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} [token] 
         * @param {string} [anonid] 
         * @param {string} [name] 
         * @param {{ [key: string]: object; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWishlistAdditemPost(token?: string, anonid?: string, name?: string, requestBody?: { [key: string]: object; }, options?: any): AxiosPromise<WishList> {
            return WishlistApiFp(configuration).apiWishlistAdditemPost(token, anonid, name, requestBody, options)(axios, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWishlistAnonidPost(options?: any): AxiosPromise<string> {
            return WishlistApiFp(configuration).apiWishlistAnonidPost(options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [anonid] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWishlistClearDelete(token?: string, anonid?: string, name?: string, options?: any): AxiosPromise<void> {
            return WishlistApiFp(configuration).apiWishlistClearDelete(token, anonid, name, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [anonid] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWishlistCreatePut(token?: string, anonid?: string, name?: string, options?: any): AxiosPromise<WishList> {
            return WishlistApiFp(configuration).apiWishlistCreatePut(token, anonid, name, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [anonid] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWishlistDeleteDelete(token?: string, anonid?: string, name?: string, options?: any): AxiosPromise<void> {
            return WishlistApiFp(configuration).apiWishlistDeleteDelete(token, anonid, name, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [anonid] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWishlistGetGet(token?: string, anonid?: string, name?: string, options?: any): AxiosPromise<WishList> {
            return WishlistApiFp(configuration).apiWishlistGetGet(token, anonid, name, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [anonid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWishlistListGet(token?: string, anonid?: string, options?: any): AxiosPromise<Array<WishListSummary>> {
            return WishlistApiFp(configuration).apiWishlistListGet(token, anonid, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [token] 
         * @param {string} [anonid] 
         * @param {string} [name] 
         * @param {{ [key: string]: object; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWishlistRemoveitemDelete(token?: string, anonid?: string, name?: string, requestBody?: { [key: string]: object; }, options?: any): AxiosPromise<WishList> {
            return WishlistApiFp(configuration).apiWishlistRemoveitemDelete(token, anonid, name, requestBody, options)(axios, basePath);
        },
    };
};

/**
 * WishlistApi - object-oriented interface
 * @export
 * @class WishlistApi
 * @extends {BaseAPI}
 */
export class WishlistApi extends BaseAPI {
    /**
     * 
     * @param {string} [token] 
     * @param {string} [anonid] 
     * @param {string} [name] 
     * @param {{ [key: string]: object; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistApi
     */
    public apiWishlistAdditemPost(token?: string, anonid?: string, name?: string, requestBody?: { [key: string]: object; }, options?: any) {
        return WishlistApiFp(this.configuration).apiWishlistAdditemPost(token, anonid, name, requestBody, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistApi
     */
    public apiWishlistAnonidPost(options?: any) {
        return WishlistApiFp(this.configuration).apiWishlistAnonidPost(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [token] 
     * @param {string} [anonid] 
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistApi
     */
    public apiWishlistClearDelete(token?: string, anonid?: string, name?: string, options?: any) {
        return WishlistApiFp(this.configuration).apiWishlistClearDelete(token, anonid, name, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [token] 
     * @param {string} [anonid] 
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistApi
     */
    public apiWishlistCreatePut(token?: string, anonid?: string, name?: string, options?: any) {
        return WishlistApiFp(this.configuration).apiWishlistCreatePut(token, anonid, name, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [token] 
     * @param {string} [anonid] 
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistApi
     */
    public apiWishlistDeleteDelete(token?: string, anonid?: string, name?: string, options?: any) {
        return WishlistApiFp(this.configuration).apiWishlistDeleteDelete(token, anonid, name, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [token] 
     * @param {string} [anonid] 
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistApi
     */
    public apiWishlistGetGet(token?: string, anonid?: string, name?: string, options?: any) {
        return WishlistApiFp(this.configuration).apiWishlistGetGet(token, anonid, name, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [token] 
     * @param {string} [anonid] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistApi
     */
    public apiWishlistListGet(token?: string, anonid?: string, options?: any) {
        return WishlistApiFp(this.configuration).apiWishlistListGet(token, anonid, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [token] 
     * @param {string} [anonid] 
     * @param {string} [name] 
     * @param {{ [key: string]: object; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WishlistApi
     */
    public apiWishlistRemoveitemDelete(token?: string, anonid?: string, name?: string, requestBody?: { [key: string]: object; }, options?: any) {
        return WishlistApiFp(this.configuration).apiWishlistRemoveitemDelete(token, anonid, name, requestBody, options)(this.axios, this.basePath);
    }

}


